{"version":3,"sources":["../src/index.js"],"names":["createBackoff","tries","addNoise","toMs","take","JsonRpcWebSocketClient","WebSocketClient","constructor","opts","url","protocols","peer","_peer","Peer","message","type","MethodNotFound","emit","on","send","CLOSED","failPendingRequests","ConnectionError","MESSAGE","write","call","method","params","request","notify"],"mappings":";;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;AAWO,MAAMA,aAAa,GAAG,UAACC,KAAD;AAAA,MAACA,KAAD;AAACA,IAAAA,KAAD,GAAS,EAAT;AAAA;;AAAA,SAC3B,kCAAYC,QAAZ,GAAuBC,IAAvB,GAA8BC,IAA9B,CAAmCH,KAAnC,CAD2B;AAAA,CAAtB;;;;AAOA,MAAMI,sBAAN,SAAqCC,wBAArC,CAAqD;AAC1DC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AACE,UAAIC,GAAJ,EAASC,SAAT;;AACA,UAAI,CAACF,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,EAAP;AACD,OAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACnCC,QAAAA,GAAG,GAAGD,IAAN;AACAA,QAAAA,IAAI,GAAG,EAAP;AACD,OAHM,MAGA;AACL,SAAC;AAAEC,UAAAA,GAAF;AAAOC,UAAAA,SAAS,GAAG,EAAnB;AAAuB,aAAGF;AAA1B,YAAmCA,IAApC;AACD;;AAED,YAAM,uBAASC,GAAT,CAAN,EAAqBC,SAArB,EAAgCF,IAAhC;AACD;AAED,UAAMG,IAAI,GAAI,KAAKC,KAAL,GAAa,IAAIC,oBAAJ,CAAUC,OAAD,IAAa;AAE/C,UAAIA,OAAO,CAACC,IAAR,KAAiB,cAArB,EAAqC;AACnC,cAAM,IAAIC,2BAAJ,EAAN;AACD;;AAED,WAAKC,IAAL,CAAU,cAAV,EAA0BH,OAA1B;AACD,KAP0B,EAOxBI,EAPwB,CAOrB,MAPqB,EAOZJ,OAAD,IAAa;AACzB,WAAKK,IAAL,CAAUL,OAAV;AACD,KAT0B,CAA3B;AAWA,SAAKI,EAAL,CAAQE,uBAAR,EAAgB,MAAM;AACpBT,MAAAA,IAAI,CAACU,mBAAL,CACE,IAAIC,gCAAJ,CAAoB,4BAApB,CADF;AAGD,KAJD;AAMA,SAAKJ,EAAL,CAAQK,wBAAR,EAAkBT,OAAD,IAAa;AAC5BH,MAAAA,IAAI,CAACa,KAAL,CAAWV,OAAX;AACD,KAFD;AAGD;;AAGDW,EAAAA,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiB;AACnB,WAAO,KAAKf,KAAL,CAAWgB,OAAX,CAAmBF,MAAnB,EAA2BC,MAA3B,CAAP;AACD;;AAEDE,EAAAA,MAAM,CAACH,MAAD,EAASC,MAAT,EAAiB;AACrB,WAAO,KAAKf,KAAL,CAAWiB,MAAX,CAAkBH,MAAlB,EAA0BC,MAA1B,CAAP;AACD;;AA7CyD","sourcesContent":["import Peer, { MethodNotFound } from \"json-rpc-peer\";\nimport { fibonacci } from \"iterable-backoff\";\n\nimport parseUrl from \"./parse-url\";\nimport WebSocketClient, {\n  ConnectionError,\n  AbortedConnection,\n  CLOSED,\n  CONNECTING,\n  MESSAGE,\n  OPEN,\n} from \"./websocket-client\";\n\n// ===================================================================\n\nexport const createBackoff = (tries = 10) =>\n  fibonacci().addNoise().toMs().take(tries);\n\nexport { ConnectionError, AbortedConnection, CLOSED, CONNECTING, OPEN };\n\n// -------------------------------------------------------------------\n\nexport class JsonRpcWebSocketClient extends WebSocketClient {\n  constructor(opts) {\n    {\n      let url, protocols;\n      if (!opts) {\n        opts = {};\n      } else if (typeof opts === \"string\") {\n        url = opts;\n        opts = {};\n      } else {\n        ({ url, protocols = [], ...opts } = opts);\n      }\n\n      super(parseUrl(url), protocols, opts);\n    }\n\n    const peer = (this._peer = new Peer((message) => {\n      // This peer is only a client and does not support requests.\n      if (message.type !== \"notification\") {\n        throw new MethodNotFound();\n      }\n\n      this.emit(\"notification\", message);\n    }).on(\"data\", (message) => {\n      this.send(message);\n    }));\n\n    this.on(CLOSED, () => {\n      peer.failPendingRequests(\n        new ConnectionError(\"connection has been closed\")\n      );\n    });\n\n    this.on(MESSAGE, (message) => {\n      peer.write(message);\n    });\n  }\n\n  // TODO: call() because RPC or request() because JSON-RPC?\n  call(method, params) {\n    return this._peer.request(method, params);\n  }\n\n  notify(method, params) {\n    return this._peer.notify(method, params);\n  }\n}\n"],"file":"index.js"}