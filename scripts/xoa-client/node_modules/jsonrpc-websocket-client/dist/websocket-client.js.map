{"version":3,"sources":["../src/websocket-client.js"],"names":["delay","ms","Promise","resolve","setTimeout","ConnectionError","BaseError","AbortedConnection","constructor","CLOSED","CONNECTING","MESSAGE","OPEN","WebSocketClient","EventEmitter","url","protocols","opts","startsWith","rejectUnauthorized","_opts","_protocols","_url","_protocol","_socket","_status","_onClose","bind","protocol","status","close","socket","abort","promise","open","backoff","_open","iterator","Symbol","cancelled","cancel","error_","attempt","catch","error","current","next","done","value","emit","then","send","data","_assertStatus","_assertNotStatus","notExpected","expected","previous","WebSocket","addEventListener"],"mappings":"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","sourcesContent":["import fromEvent from \"promise-toolbox/fromEvent\";\nimport fromEvents from \"promise-toolbox/fromEvents\";\nimport pTry from \"promise-toolbox/try\";\nimport WebSocket from \"isomorphic-ws\";\nimport { BaseError } from \"make-error\";\nimport { EventEmitter } from \"events\";\n\n// ===================================================================\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// ===================================================================\n\n// This error is used to fail pending requests when the connection is\n// closed.\nexport class ConnectionError extends BaseError {}\n\nexport class AbortedConnection extends ConnectionError {\n  constructor() {\n    super(\"connection aborted\");\n  }\n}\n\n// -------------------------------------------------------------------\n\nexport const CLOSED = \"closed\";\nexport const CONNECTING = \"connecting\";\nexport const MESSAGE = \"message\";\nexport const OPEN = \"open\";\n\n// -------------------------------------------------------------------\n\nexport default class WebSocketClient extends EventEmitter {\n  constructor(url, protocols, opts) {\n    super();\n\n    if (opts && !url.startsWith(\"wss\")) {\n      // `rejectUnauthorized` cannot be used if the connection is not\n      // `secure!\n      delete opts.rejectUnauthorized;\n    }\n\n    this._opts = opts;\n    this._protocols = protocols;\n    this._url = url;\n\n    this._protocol = null;\n    this._socket = null;\n    this._status = CLOSED;\n\n    this._onClose = this._onClose.bind(this);\n  }\n\n  get protocol() {\n    return this._protocol;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  close() {\n    return pTry(() => {\n      const status = this._status;\n      if (status === CLOSED) {\n        return;\n      }\n\n      const socket = this._socket;\n      if (status === CONNECTING) {\n        socket.abort = true;\n        socket.close();\n        return;\n      }\n\n      const promise = fromEvent(socket, \"close\");\n      socket.close();\n      return promise;\n    });\n  }\n\n  open(backoff) {\n    if (!backoff) {\n      return this._open();\n    }\n\n    const iterator = backoff[Symbol.iterator]();\n\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    let error_;\n    const attempt = () => {\n      if (cancelled) {\n        throw error_;\n      }\n\n      return this._open().catch((error) => {\n        let current;\n\n        if (\n          error instanceof AbortedConnection ||\n          (current = iterator.next()).done\n        ) {\n          throw error;\n        }\n\n        const { value } = current;\n        this.emit(\"scheduledAttempt\", {\n          cancel,\n          delay: value,\n        });\n\n        error_ = error;\n        return delay(current.value).then(attempt);\n      });\n    };\n\n    const promise = attempt();\n    promise.cancel = cancel;\n\n    return promise;\n  }\n\n  send(data) {\n    this._assertStatus(OPEN);\n\n    this._socket.send(data);\n  }\n\n  _assertNotStatus(notExpected) {\n    if (this._status === notExpected) {\n      throw new ConnectionError(`invalid status ${this._status}`);\n    }\n  }\n\n  _assertStatus(expected) {\n    if (this._status !== expected) {\n      throw new ConnectionError(\n        `invalid status ${this._status}, expected ${expected}`\n      );\n    }\n  }\n\n  _onClose() {\n    const previous = this._status;\n\n    this._socket = null;\n    this._status = CLOSED;\n\n    if (previous === OPEN) {\n      this.emit(CLOSED);\n    }\n  }\n\n  _open() {\n    return pTry(() => {\n      this._assertStatus(CLOSED);\n      this._status = CONNECTING;\n\n      return pTry(() => {\n        const socket = (this._socket = new WebSocket(\n          this._url,\n          this._protocols,\n          this._opts\n        ));\n\n        return fromEvents(socket, [\"open\"], [\"close\", \"error\"]).then(\n          () => {\n            socket.addEventListener(\"close\", this._onClose);\n\n            socket.addEventListener(\"error\", (error) => {\n              this.emit(\"error\", error);\n            });\n\n            socket.addEventListener(\"message\", ({ data }) => {\n              this.emit(MESSAGE, data);\n            });\n\n            this._status = OPEN;\n            this.emit(OPEN);\n          },\n          ([error]) => {\n            if (socket.abort) {\n              throw new AbortedConnection();\n            }\n\n            throw error;\n          }\n        );\n      }).catch((error) => {\n        this._onClose();\n\n        throw error;\n      });\n    });\n  }\n}\n"],"file":"websocket-client.js"}